/// @file <trace/call>
/// Call trace and call stack overview instruments

#pragma once

#include <trace/export>
#include <memory>

namespace trace
{
    class TRACE_PUBLIC call
    {
    public:
        call(const char* name, const char* file, long long line);
        ~call();

        const char* get_name() const;
        const char* get_file() const;
        long long get_line() const;

        class stack;
        class warden;

    private:
        class data;

        std::shared_ptr<data> m_data;
    };

    class TRACE_PUBLIC call::stack
    {
    public:
        static const call& get_call(size_t offset = 0);
        static call::warden push(const call& new_call);
        static size_t size();

        class iterator;

        static iterator begin();
        static iterator end();

    private:
        // static methods only
        stack();
        stack(stack&&);
        stack(const stack&);
    };

    class TRACE_PUBLIC call::stack::iterator
    {
    public:
        class data;

        iterator(data&& new_data);
        iterator(const iterator& another);
        iterator(iterator&& temporary);
        ~iterator();

        iterator& operator ++ ();
        iterator& operator -- ();

        iterator operator ++ (int);
        iterator operator -- (int);

        iterator operator + (size_t delta) const;
        iterator operator - (size_t delta) const;

        size_t operator - (const iterator& another) const;

        iterator& operator += (size_t delta);
        iterator& operator -= (size_t delta);

    private:
        data* m_data;
        static const size_t max_data_size = 16;
        char m_storage[max_data_size];
    };

    class TRACE_PUBLIC call::warden
    {
    public:
        warden(warden&& temporary);
        ~warden();

    private:
        bool m_pop;

        warden();
        warden(const warden&);

        friend class call::stack;
    };
}

#define TRACE_CALL  \
    ::trace::call::warden _call_warden = \
        ::trace::call::stack::push( \
            ::trace::call(__func__, __FILE__, __LINE__))

/// @author Владимир Керимов

// Public header: <trace/scope>

#pragma once

#include <trace/export>
#include <functional>
#include <string>
#include <map>

QUA_TRACE_BEGIN

class QUA_TRACE_PUBLIC scope
{
public:
    explicit scope(const std::string& name);
    scope(scope& owner, const std::string& name);

    static scope& global();

    const std::string& get_name() const;
    const std::string& get_path() const;
    const std::string& get_full_name() const;

          scope& get_owner();
    const scope& get_owner() const;

    typedef std::map<std::string, scope> container;
    typedef container::iterator iterator;
    typedef container::const_iterator const_iterator;
    typedef container::reverse_iterator reverse_iterator;
    typedef container::const_reverse_iterator const_reverse_iterator;

          container& get_all();
    const container& get_all() const;

          scope& get_scope(const std::string& name);
    const scope& get_scope(const std::string& name) const;

    const_iterator begin() const;
    const_iterator end() const;

    iterator begin();
    iterator end();

    const_reverse_iterator rbegin() const;
    const_reverse_iterator rend() const;

    reverse_iterator rbegin();
    reverse_iterator rend();

    const_iterator cbegin() const;
    const_iterator cend() const;

    size_t size() const;

    typedef std::function<void(const scope&)> const_scope_handler;
    typedef std::function<void(scope&)> scope_handler;

    void each(const const_scope_handler& handler) const;
    void each(const scope_handler& handler);

private:
    scope(); // for global scope only

    class data;

    std::shared_ptr<data> m_data;
};

QUA_TRACE_END

// Unicode signature: Владимир Керимов

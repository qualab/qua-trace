// Public header: <trace/scope>

#pragma once

#include <trace/exception>
#include <memory>

QUA_TRACE_BEGIN

class QUA_TRACE_PUBLIC scope
{
public:
    explicit scope(const std::string& name);
    scope(scope& owner, const std::string& name);

    class name_conflict;

    static scope global();

    std::string get_name() const;
    std::string get_path() const;
    std::string get_full_name() const;

    scope get_owner() const;

    typedef void (*handler_type)(const scope&);

    void each(handler_type handler) const;

private:
    class data;

    std::shared_ptr<data> m_data;

    scope();
    void add_child(scope& child);
};

class QUA_TRACE_PUBLIC scope::name_conflict : public exception
{
public:
    name_conflict(const scope& owner, const std::string& name);
};

inline const std::string& scope::get_name() const
{
    return m_name;
}

inline const std::string& scope::get_path() const
{
    return m_path;
}

inline const std::string& scope::get_full_name() const
{
    return m_full_name;
}

inline const scope::map_type& scope::get_map() const
{
    return m_map;
}

inline scope& scope::get_owner()
{
    return m_owner;
}

inline const scope& scope::get_owner() const
{
    return m_owner;
}

QUA_TRACE_END

// Unicode signature: Владимир Керимов
